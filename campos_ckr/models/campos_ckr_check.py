# -*- coding: utf-8 -*-
# Copyright 2016 Stein & Gabelgaard ApS
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from openerp import api, fields, models, exceptions, SUPERUSER_ID, _


class CamposCkrCheck(models.Model):

    _name = 'campos.ckr.check'
    _description = 'Campos Ckr Check'  # TODO
    _inherit = ['mail.thread', 'ir.needaction_mixin', 'model_field_access']
    _order = 'state, participant_id'
    _mail_post_access = 'read'

    display_name = fields.Char(related='participant_id.display_name')
    participant_id = fields.Many2one('campos.event.participant', 'Participant', index=True)
    cpr = fields.Char('CPR', size=4)  # Last 4 digits of the Danish social security number
    birthdate_short = fields.Char(related='participant_id.birthdate_short')
    appr_date = fields.Date('Approval date')
    appr_user_id = fields.Many2one('res.users', 'Approved by')
    state = fields.Selection([('draft', 'Draft'),  # New, maybe autogenerated
                              ('sentin', 'Sent to CO'),  # Filled out, and sent to Central Org
                              ('ckr_req', 'Requested'),  # Req. from CKR reg
                              ('approved', 'Approved'),
                              ('timeout', 'Timeout'),
                              ('re_ckr_req', 'Re-Requested'),  # Req. from CKR reg
                              ('needinfo', 'Info Needed'),
                              ('sent_com', 'Sent to Main Committee'),
                              ('cancel', 'Cancelled'),
                              ('rejected', 'Rejected')],
                             track_visibility='onchange', default='draft', string='State', index=True)
    date_last_state_update = fields.Datetime('Last State change', index=True, default=fields.Datetime.now)
    main_comm_id = fields.Many2one(related='participant_id.primary_committee_id.main_comm_id')

    _track = {
        'state': {
              'campos_ckr.mt_ckr_approved': lambda self, cr, uid, obj, ctx = None: obj.state == 'approved',
              'campos_ckr.mt_ckr_draft': lambda self, cr, uid, obj, ctx = None: obj.state == 'draft' and obj.cpr == False,
              'campos_ckr.mt_ckr_ckr_req': lambda self, cr, uid, obj, ctx = None: obj.state == 'ckr_req',
              }
        }

    # Computed fields for access control
    edit_appr_date = fields.Boolean(compute='_edit_appr_date', default=False)

    @api.constrains('cpr')
    def _check_description(self):
        if self.state in ['sentin', 'ckr_req']:
            if not (len(self.cpr) == 4 and self.cpr.isdigit()):
                raise exceptions.ValidationError("CPR number must be 4 digits")
        
    @api.one
    def _edit_appr_date(self, operation=None):
        self.edit_appr_date = self.user_has_groups('campos_ckr.group_campos_ckr_admin') or self.env.uid == SUPERUSER_ID
        return self.edit_appr_date

    @api.multi
    def check_prerequisites(self):
        '''
        Check if all parameters are set, and if so update state from draft to sentin
        '''
        for ckr in self:
            if ckr.participant_id.birthdate and ckr.cpr and ckr.state in ['draft', 'needinfo','sent_com']:
                ckr.state = 'sentin'

    @api.multi
    def action_confirm(self):
        self.check_prerequisites()

    @api.multi
    def action_req_ckr(self):
        self.state = 'ckr_req'
        
    @api.multi
    def action_re_req_ckr(self):
        self.state = 're_ckr_req'

    @api.multi
    def action_approve(self):
        self.state = 'approved'

    @api.multi
    def action_reject(self):
        self.ensure_one()  # Rejecting multiple requests is probably a mistake
        self.state = 'rejected'

    @api.multi
    def action_cancel(self):
        self.state = 'cancel'

    @api.multi
    def action_timeout(self):
        self.state = 'timeout'
        
    @api.multi
    def action_needinfo(self):
        self.state = 'needinfo'
        template = self.env.ref('campos_ckr.template_ckr_info_needed_mail', False)
        return self.action_send_mail(template, _('Send mail asking for additional info'))

    @api.multi
    def action_sent_com(self):
        self.state = 'sent_com'
        template = self.env.ref('campos_ckr.template_ckr_action_required_mail', False)
        return self.action_send_mail(template, _('Request action from Main Committee'))

    @api.multi
    def write(self, vals):
        can_approve = self.user_has_groups('campos_ckr.group_campos_ckr_admin') or self.env.uid == SUPERUSER_ID
        permanent_states = ['approved', 'rejected', 'cancel']

        # Add approval date and user and clear cpr if state changes to a permanent state
        if 'state' in vals:
            vals['date_last_state_update'] = fields.Datetime.now()
            if vals['state'] in permanent_states and can_approve:
                if 'appr_date' not in vals and vals['state'] == 'approved':
                    vals['appr_date'] = fields.Date.context_today(self)
                vals['appr_user_id'] = self.env.uid
                vals['cpr'] = False

        # Remove fields that the user is not allowed to update
        if not can_approve:
            for f in ['appr_date', 'appr_user_id']:
                if f in vals:
                    del vals[f]
            if 'state' in vals and vals['state'] not in ['draft', 'sentin']:
                del vals['state']

        return super(CamposCkrCheck, self).write(vals)

    @api.model
    def _needaction_domain_get(self):
        """
        Show a count of CKR Check that need action on the menu badge.
        """
        if self.user_has_groups('campos_ckr.group_campos_ckr_admin'):
            return [('state', 'in', ['sentin', 'ckr_req'])]
        else:
            return [('state', 'in', ['draft'])]

    @api.model
    def get_ckrdata_action(self, ckr_ids):
        '''
        Return action to show info box with about CPR numbers to request
        '''
        cpr_list = []
        ckrs = self.browse(ckr_ids)
        for ckr in ckrs:
            cpr_list.append(''.join(filter(None, [ckr.participant_id.birthdate_short, ckr.cpr, ' ', ckr.participant_id.name])))
        message='\n'.join(filter(None, cpr_list))
        wiz = self.env['campos.ckr.sentin.wiz'].create({'message': message,
                                                        })
        wiz.ckr_ids = ckrs
        return {
            'name': _('Request'),
            'view_mode': 'form',
            'view_type': 'form',
            'res_model': 'campos.ckr.sentin.wiz',
            'type': 'ir.actions.act_window',
            'nodestroy': True,
            'domain': '[]',
            'target': 'new',
            'res_id': wiz.id,
            }


#     @api.one
#     def state_accepted_for_new_functions(self):
#         '''
#         Test if the state is acceptable to allow new functions
#         '''
#         if self.state == 'rejected' and not self.env.context.get('ckr_dont_raise_rejected_exception', False):
#             raise exceptions.Warning(_('CKR check locked by central office'))
#         return self.state in ('draft', 'sentin', 'ckr_req', 'approved')
# 
    @api.multi
    def action_open_participant(self):
        self.ensure_one()
        return {
            'name': self.participant_id.name,
            'view_mode': 'form',
            'view_type': 'form',
            'res_model': 'campos.event.participant',
            'type': 'ir.actions.act_window',
            'nodestroy': True,
            'domain': '[]',
            'res_id': self.participant_id.id,
            'context': {'active_id': self.participant_id.id}, 
            }

    @api.multi
    @api.depends('member_id')
    def name_get(self):
        result = []
        for ms in self:
            result.append((ms.id, 'CKR for %s' % (ms.participant_id.name if ms.participant_id else _('Unknown'))))
        return result


    @api.multi
    def action_send_mail(self, template, title):
        """ Open a window to compose an email, with the template
            message loaded by default
        """
        assert len(self) == 1, 'This option should only be used for a single id at a time.'
        compose_form = self.env.ref('mail.email_compose_message_wizard_form', False)
        ctx = dict(
            default_model='campos.ckr.check',
            default_res_id=self.id,
            default_use_template=bool(template),
            default_template_id=template.id,
            default_composition_mode='comment',

        )
        return {
            'name': title,
            'type': 'ir.actions.act_window',
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'mail.compose.message',
            'views': [(compose_form.id, 'form')],
            'view_id': compose_form.id,
            'target': 'new',
            'context': ctx,
        }
